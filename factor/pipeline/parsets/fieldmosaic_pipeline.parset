pipeline.steps = [update_mapfile_hosts, create_images_map, create_vertices_map, create_compressed_mapfile_images, create_compressed_mapfile_vertices, make_mosaic, create_ms_map, create_compressed_mapfile_ms, sort_into_Groups, sort_into_Groups_maps, concat_data, create_compressed_mapfile, concat, make_pbimage, zero_avgpb, image2fits, correct_mosaic]

pipeline.pluginpath                                    =   {{ pipeline_dir }}/plugins

update_mapfile_hosts.control.kind                      =   plugin
update_mapfile_hosts.control.type                      =   updateHosts
update_mapfile_hosts.control.mapfile_dir               =   input.output.mapfile_dir
update_mapfile_hosts.control.hosts                     =   {{ hosts }}

# create a mapfile with the existing facet images, length = nfacets
create_images_map.control.kind                         =   plugin
create_images_map.control.type                         =   addListMapfile
create_images_map.control.hosts                        =   {{ hosts }}
create_images_map.control.files                        =   {{ facet_image_filenames }}
create_images_map.control.mapfile_dir                  =   input.output.mapfile_dir
create_images_map.control.filename                     =   facet_images.mapfile

# create a mapfile with the existing vertices, length = unknown / nfacets
create_vertices_map.control.kind                       =   plugin
create_vertices_map.control.type                       =   addListMapfile
create_vertices_map.control.hosts                      =   {{ hosts }}
create_vertices_map.control.files                      =   {{ facet_vertices_filenames }}
create_vertices_map.control.mapfile_dir                =   input.output.mapfile_dir
create_vertices_map.control.filename                   =   facet_vertices.mapfile

# compress mapfile so that all images are in one group, length = 1
create_compressed_mapfile_images.control.kind          =   plugin
create_compressed_mapfile_images.control.type          =   compressMapfile
create_compressed_mapfile_images.control.mapfile_in    =   create_images_map.output.mapfile
create_compressed_mapfile_images.control.mapfile_dir   =   input.output.mapfile_dir
create_compressed_mapfile_images.control.filename      =   mosaic_images_input.mapfile

# compress mapfile so that all vertices are in one group, length = 1
create_compressed_mapfile_vertices.control.kind        =   plugin
create_compressed_mapfile_vertices.control.type        =   compressMapfile
create_compressed_mapfile_vertices.control.mapfile_in  =   create_vertices_map.output.mapfile
create_compressed_mapfile_vertices.control.mapfile_dir =   input.output.mapfile_dir
create_compressed_mapfile_vertices.control.filename    =   mosaic_vertices_input.mapfile

# make the mosaic image, length = 1
make_mosaic.control.type                               =   mosaic_images
make_mosaic.control.mapfiles_in                        =   [create_compressed_mapfile_images.output.mapfile,create_compressed_mapfile_vertices.output.mapfile]
make_mosaic.control.inputkeys                          =   [images,vertices]
make_mosaic.control.outputkey                          =   outfile
make_mosaic.argument.flags                             =   [images,vertices,outfile]

# create a mapfile with all single MSs from supplied list, length = nfiles
create_ms_map.control.kind                             =   plugin
create_ms_map.control.type                             =   addListMapfile
create_ms_map.control.hosts                            =   {{ hosts }}
create_ms_map.control.files                            =   {{ ms_files_single }}
create_ms_map.control.mapfile_dir                      =   input.output.mapfile_dir
create_ms_map.control.filename                         =   input_MSs_single.mapfile

# create a multi-mapfile with the groups of MSs from supplied list, length = nbands
# not needed for the time being...
create_msmulti_map.control.kind                        =   plugin
create_msmulti_map.control.type                        =   addListMultiMapfile
create_msmulti_map.control.hosts                       =   {{ hosts }}
create_msmulti_map.control.files                       =   {{ ms_files_grouped }}
create_msmulti_map.control.mapfile_dir                 =   input.output.mapfile_dir
create_msmulti_map.control.filename                    =   input_files_grouped.mapfile

# compress mapfile so that all MSs are in one group, length = 1
create_compressed_mapfile_ms.control.kind              =   plugin
create_compressed_mapfile_ms.control.type              =   compressMapfile
create_compressed_mapfile_ms.control.mapfile_in        =   create_ms_map.output.mapfile
create_compressed_mapfile_ms.control.mapfile_dir       =   input.output.mapfile_dir
create_compressed_mapfile_ms.control.filename          =   compressed_MSs_all.mapfile

# sort compressed mapfile so that there is one group per timestamp, length = ntimes
sort_into_Groups.control.type                          =   sort_times_into_freqGroups
sort_into_Groups.argument.flags                        =   [create_compressed_mapfile_ms.output.mapfile]
sort_into_Groups.argument.filename                     =   sorted_groups.mapfile
sort_into_Groups.argument.mapfile_dir                  =   input.output.mapfile_dir
sort_into_Groups.argument.hosts                        =   {{ hosts }}
sort_into_Groups.argument.target_path                  =   input.output.working_directory/input.output.job_name

# convert the output of sort_into_Groups into usable mapfiles, len = 1 / ntimes
sort_into_Groups_maps.control.kind                     =   plugin
sort_into_Groups_maps.control.type                     =   mapfilenamesFromMapfiles
sort_into_Groups_maps.control.mapfile_groupmap         =   sort_into_Groups.output.groupmapfile.mapfile
sort_into_Groups_maps.control.mapfile_filesmap         =   sort_into_Groups.output.mapfile.mapfile

# concat data in frequency, length = ntimes
concat_data.control.type                               =   dppp
concat_data.control.mapfile_out                        =   sort_into_Groups_maps.output.groupmap
concat_data.control.mapfile_in                         =   sort_into_Groups_maps.output.filesmap
concat_data.control.inputkey                           =   msin
concat_data.argument.numthreads                        =   {{ max_cpus_per_io_proc_ntimes }}
concat_data.argument.msin.datacolumn                   =   DATA
concat_data.argument.msin.missingdata                  =   True
concat_data.argument.msin.orderms                      =   False
concat_data.argument.msout.overwrite                   =   True
concat_data.argument.msout.writefullresflag            =   False
concat_data.argument.local_scratch_dir                 =   {{ local_dir }}
concat_data.argument.steps                             =   [avg]
concat_data.argument.avg.type                          =   squash
concat_data.argument.avg.freqstep                      =   {{ avgpb_freqstep }}
concat_data.argument.avg.timestep                      =   {{ avgpb_timestep }}
{% if use_compression %}
concat_data.argument.msout.storagemanager              =   "Dysco"
concat_data.argument.msout.storagemanager.databitrate           =   16
concat_data.argument.msout.storagemanager.weightbitrate         =   12
concat_data.argument.msout.storagemanager.distribution          =   "TruncatedGaussian"
concat_data.argument.msout.storagemanager.disttruncation        =   1.5
concat_data.argument.msout.storagemanager.normalization         =   "AF"
{% endif %}

# create compressed mapfile of averaged data, length = 1
create_compressed_mapfile.control.kind                 =   plugin
create_compressed_mapfile.control.type                 =   compressMapfile
create_compressed_mapfile.control.mapfile_in           =   concat_data.output.mapfile
create_compressed_mapfile.control.mapfile_dir          =   input.output.mapfile_dir
create_compressed_mapfile.control.filename             =   compressed_averaged.mapfile

# virtual concat of averaged data, length = 1
concat.control.type                                    =   virtual_concat
concat.control.mapfile_in                              =   create_compressed_mapfile.output.mapfile
concat.control.inputkey                                =   msfiles
concat.control.outputkey                               =   msconcat
concat.argument.flags                                  =   [msfiles,msconcat]

# make a dummy image with the awimager to get the primary beam, length = 1
make_pbimage.control.type                              =   awimager
make_pbimage.control.opts.mapfile_in                   =   concat.output.mapfile
make_pbimage.control.opts.inputkey                     =   ms
make_pbimage.control.opts.outputkey                    =   image
make_pbimage.argument.numthreads                       =   {{ max_cpus_per_proc_single }}
make_pbimage.argument.data                             =   DATA
make_pbimage.argument.weight                           =   briggs
make_pbimage.argument.npix                             =   4096
make_pbimage.argument.cellsize                         =   5.5arcsec
make_pbimage.argument.padding                          =   1.
make_pbimage.argument.gain                             =   0.1
make_pbimage.argument.stokes                           =   I
make_pbimage.argument.operation                        =   mfclark
make_pbimage.argument.oversample                       =   5
make_pbimage.argument.timewindow                       =   300
make_pbimage.argument.ApplyElement                     =   0
make_pbimage.argument.FindNWplanes                     =   True
make_pbimage.argument.threshold                        =   1.0mJy
make_pbimage.argument.PBCut                            =   1e-2
make_pbimage.argument.wmax                             =   20000
make_pbimage.argument.UVmin                            =   0.08
make_pbimage.argument.UVmax                            =   10
make_pbimage.argument.SpheSupport                      =   15
make_pbimage.argument.robust                           =   -0.25
make_pbimage.argument.niter                            =   1

# zero the corners of the primary beam image, length = 1
zero_avgpb.control.type                                =   zero_avgpb
zero_avgpb.control.mapfile_in                          =   make_pbimage.output.make_pbimage0.avgpb.mapfile
zero_avgpb.control.inputkey                            =   avgpb
zero_avgpb.control.outputkey                           =   outfile
zero_avgpb.argument.flags                              =   [avgpb,outfile]

# convert primary beam image to fits, length = 1
image2fits.control.type                                =   image2fits
image2fits.control.outputkey                           =   out
image2fits.argument.in                                 =   zero_avgpb.output.mapfile

# correct the mosaic image with the primary beam, length = 1
correct_mosaic.control.type                            =   pb_correct
correct_mosaic.control.mapfiles_in                     =   [make_mosaic.output.mapfile,image2fits.output.mapfile]
correct_mosaic.control.inputkeys                       =   [mosaic,avgpbz]
correct_mosaic.control.outputkey                       =   outroot
correct_mosaic.argument.flags                          =   [mosaic,avgpbz,outroot]
