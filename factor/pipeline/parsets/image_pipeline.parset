pipeline.steps = [update_mapfile_hosts, create_sector_files_map, create_freqstep_map, create_starttime_map, create_ntimes_map, prepare_imaging_data, create_compressed_mapfile, premask, make_aterm_config, image, filter]

pipeline.pluginpath = {{ pipeline_dir }}/plugins

# update host entries in all mapfiles
update_mapfile_hosts.control.kind        = plugin
update_mapfile_hosts.control.type        = updateHosts
update_mapfile_hosts.control.mapfile_dir = input.output.mapfile_dir
update_mapfile_hosts.control.hosts       = {{ hosts }}

# create a mapfile with input data from supplied list, length = nobs
create_sector_files_map.control.kind        = plugin
create_sector_files_map.control.type        = addListMapfile
create_sector_files_map.control.hosts       = {{ hosts }}
create_sector_files_map.control.files       = {{ obs_filename }}
create_sector_files_map.control.mapfile_dir = input.output.mapfile_dir
create_sector_files_map.control.filename    = sector_files.mapfile

# create a mapfile with each observation's freqstep value, length = nobs
create_freqstep_map.control.kind        = plugin
create_freqstep_map.control.type        = addListMapfile
create_freqstep_map.control.hosts       = {{ hosts }}
create_freqstep_map.control.files       = {{ image_freqstep }}
create_freqstep_map.control.mapfile_dir = input.output.mapfile_dir
create_freqstep_map.control.filename    = freqstep.mapfile

# create a mapfile with each observation's starttime value, length = nobs
create_starttime_map.control.kind        = plugin
create_starttime_map.control.type        = addListMapfile
create_starttime_map.control.hosts       = {{ hosts }}
create_starttime_map.control.files       = {{ starttime }}
create_starttime_map.control.mapfile_dir = input.output.mapfile_dir
create_starttime_map.control.filename    = starttime.mapfile

# create a mapfile with each observation's ntimes value, length = nobs
create_ntimes_map.control.kind        = plugin
create_ntimes_map.control.type        = addListMapfile
create_ntimes_map.control.hosts       = {{ hosts }}
create_ntimes_map.control.files       = {{ ntimes }}
create_ntimes_map.control.mapfile_dir = input.output.mapfile_dir
create_ntimes_map.control.filename    = ntimes.mapfile

# phase shift and average, length = nobs
prepare_imaging_data.control.type                                 = dppp
prepare_imaging_data.control.mapfiles_in                          = [create_sector_files_map.output.mapfile,create_freqstep_map.output.mapfile,create_starttime_map.output.mapfile,create_ntimes_map.output.mapfile]
prepare_imaging_data.control.inputkeys                            = [msin,freqstep,starttime,ntimes]
prepare_imaging_data.argument.numthreads                          = {{ max_cpus_per_proc_single }}
prepare_imaging_data.argument.msin.datacolumn                     = DATA
prepare_imaging_data.argument.msout.overwrite                     = True
prepare_imaging_data.argument.msin.starttime                      = starttime
prepare_imaging_data.argument.msin.ntimes                         = ntimes
prepare_imaging_data.argument.msout.writefullresflag              = False
{% if flag_abstime is not none or flag_baseline is not none or flag_freqrange is not none %}
prepare_imaging_data.argument.steps                               = [flag,shift,flagzero,interp,avg]
prepare_imaging_data.argument.flag.type                           = preflagger
prepare_imaging_data.argument.flag.expr                           = {{ flag_expr }}
{% if flag_abstime is not none %}
prepare_imaging_data.argument.flag.flag_abstime.abstime           = {{ flag_abstime }}
{% endif %}
{% if flag_baseline is not none %}
prepare_imaging_data.argument.flag.flag_baseline.baseline         = {{ flag_baseline }}
{% endif %}
{% if flag_freqrange is not none %}
prepare_imaging_data.argument.flag.flag_freqrange.freqrange       = {{ flag_freqrange }}
{% endif %}
{% else %}
prepare_imaging_data.argument.steps                               = [shift,flagzero,interp,avg]
{% endif %}
prepare_imaging_data.argument.shift.type                          = phaseshifter
prepare_imaging_data.argument.shift.phasecenter                   = [{{ ra }}deg, {{ dec }}deg]
prepare_imaging_data.argument.flagzero.type                       = preflagger
prepare_imaging_data.argument.flagzero.amplmin                    = 1e-20
prepare_imaging_data.argument.interp.type                         = interpolate
prepare_imaging_data.argument.avg.type                            = squash
prepare_imaging_data.argument.avg.freqstep                        = freqstep
prepare_imaging_data.argument.msout.storagemanager                = "Dysco"

# make the compressed mapfile, length = 1
create_compressed_mapfile.control.kind        = plugin
create_compressed_mapfile.control.type        = compressMapfile
create_compressed_mapfile.control.mapfile_in  = prepare_imaging_data.output.mapfile
create_compressed_mapfile.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile.control.filename    = imaging_input.mapfile

# make a preliminary clean mask for the sector region, length = 1
premask.control.type                   = blank_image
premask.control.mapfile_in             = create_compressed_mapfile.output.mapfile
premask.control.inputkey               = imagefile
premask.control.outputkey              = maskfile
premask.argument.flags                 = [imagefile,maskfile]
premask.argument.imsize                = {{ wsclean_imsize }}
premask.argument.vertices_file         = {{ vertices_file }}
premask.argument.reference_ra_deg      = {{ ra }}
premask.argument.reference_dec_deg     = {{ dec }}
premask.argument.cellsize_deg          = {{ cellsize_deg }}
premask.argument.region_file           = {{ region_file }}
premask.argument.make_blank_image      = True

# make the aterm-config file, length = 1
make_aterm_config.control.type          = make_aterm_config
make_aterm_config.control.mapfile_in    = create_compressed_mapfile.output.mapfile
make_aterm_config.control.inputkey      = infile
make_aterm_config.control.outputkey     = outfile
make_aterm_config.argument.flags        = [infile,outfile]
make_aterm_config.argument.tec_mapfile  = {{ fast_aterms_mapfile }}
make_aterm_config.argument.gain_mapfile = {{ slow_aterms_mapfile }}
make_aterm_config.argument.use_beam     = True

# do the imaging, length = 1
# NOTE: the beam parameters are specified in the aterm config file made above. We need
# to add the -apply-primary-beam flag to get the pb-corrected source list and
image.control.type                    = wsclean
image.control.mapfiles_in             = [create_compressed_mapfile.output.mapfile,premask.output.mapfile,make_aterm_config.output.mapfile]
image.control.inputkeys               = [msfile,fitsmask,atermconfig]
image.argument.flags                  = [-no-update-model-required,-multiscale,-fit-beam,-reorder,-save-source-list,-local-rms,-join-channels,-use-idg,-apply-primary-beam,msfile]
image.argument.fits-mask              = fitsmask
image.argument.size                   = {{ wsclean_imsize }}
image.argument.niter                  = {{ wsclean_niter }}
image.argument.pol                    = I
# NOTE: currently, -save-source-list only works with pol=I -- when it works with other
# pols, enable IQUV imaging with the following lines
# image.argument.pol                    = IQUV
# image.argument.link-polarizations     = I
image.argument.weight                 = briggs {{ robust }}
image.argument.mgain                  = 0.6
image.argument.padding                = {{ wsclean_image_padding }}
image.argument.minuv-l                = {{ min_uv_lambda }}
image.argument.maxuv-l                = {{ max_uv_lambda }}
image.argument.scale                  = {{ cellsize_deg }}
image.argument.mem                    = {{ max_percent_memory_per_proc_single }}
image.argument.j                      = {{ max_cpus_per_proc_single }}
image.argument.multiscale-scales      = {{ multiscale_scales_pixel }}
{% if local_dir is not none %}
image.argument.temp-dir               = {{ local_dir_parent }}
{% endif %}
image.argument.deconvolution-channels = 4
image.argument.fit-spectral-pol       = 3
image.argument.channels-out           = 12
image.argument.multiscale-shape       = gaussian
image.argument.weighting-rank-filter  = 3
{% if taper_arcsec > 0.0 %}
image.argument.taper-gaussian         = {{ taper_arcsec }}
{% endif %}
{% if region_file != "[]" %}
image.argument.auto-mask              = {{ auto_mask - 1 }}
{% else %}
image.argument.auto-mask              = {{ auto_mask }}
{% endif %}
image.argument.auto-threshold         = 1.0
image.argument.local-rms-window       = 50
image.argument.local-rms-method       = rms-with-min
image.argument.idg-mode               = {{ idg_mode }}
image.argument.aterm-config           = atermconfig
image.argument.aterm-kernel-size      = 16
image.argument.parallel-deconvolution = 512

# filter the sky model using PyBDSF, length = 1
filter.control.type                   = filter_skymodel
filter.control.mapfiles_in            = [image.output.image-MFS-image.fits.mapfile,image.output.image-sources.txt.mapfile,image.output.image-sources-pb.txt.mapfile]
# NOTE: currently, -save-source-list only works with pol=I -- when it works with other
# pols, enable IQUV imaging with the following line
# filter.control.mapfiles_in            = [image.output.image-MFS-I-image.fits.mapfile,image.output.image-sources.txt.mapfile,image.output.image-sources-pb.txt.mapfile]
filter.control.inputkeys              = [imagefile,nonpb_modelfile,pb_modelfile]
filter.control.outputkey              = outroot
filter.argument.flags                 = [imagefile,nonpb_modelfile,pb_modelfile,outroot]
