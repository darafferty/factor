pipeline.steps = [create_sector_files_map, create_sector_skymodels_map, create_sector_sourcedbs, expand_sourcedbs_map, create_predict_output_map, expand_combined_h5parms_map, create_sector_patches_map, predict_model_data, create_obs_files_map, subtract_models]

pipeline.pluginpath = {{ pipeline_dir }}/plugins

# create a mapfile with the MS filenames for each sector, length = nsectors*nobs
create_sector_files_map.control.kind        = plugin
create_sector_files_map.control.type        = addListMapfile
create_sector_files_map.control.hosts       = {{ hosts }}
create_sector_files_map.control.files       = {{ sector_filename }}
create_sector_files_map.control.mapfile_dir = input.output.mapfile_dir
create_sector_files_map.control.filename    = sectorfiles.mapfile

# create a mapfile with the sector sky models, length = nsectors
create_sector_skymodels_map.control.kind        = plugin
create_sector_skymodels_map.control.type        = addListMapfile
create_sector_skymodels_map.control.hosts       = {{ hosts }}
create_sector_skymodels_map.control.files       = {{ sector_skymodel }}
create_sector_skymodels_map.control.mapfile_dir = input.output.mapfile_dir
create_sector_skymodels_map.control.filename    = sector_skymodels.mapfile

# convert the skymodels into sourcedbs, length = nsectors
create_sector_sourcedbs.control.type       = make_sourcedb
create_sector_sourcedbs.control.mapfile_in = create_sector_skymodels_map.output.mapfile
create_sector_sourcedbs.control.inputkey   = in
create_sector_sourcedbs.argument.format    = <
create_sector_sourcedbs.argument.outtype   = blob
create_sector_sourcedbs.argument.append    = False

# expand the sourcebds mapfile, length = nsectors -> nsectors*nobs
expand_sourcedbs_map.control.kind             = plugin
expand_sourcedbs_map.control.type             = expandMapfile
expand_sourcedbs_map.control.mapfile_in       = create_sector_sourcedbs.output.mapfile
expand_sourcedbs_map.control.mapfile_to_match = create_sector_files_map.output.mapfile
expand_sourcedbs_map.control.mapfile_dir      = input.output.mapfile_dir
expand_sourcedbs_map.control.filename         = expand_sourcedbs.mapfile

# append a unique index to the MS filenames to create the output filenames, length = nsectors*nobs
create_predict_output_map.control.kind          = plugin
create_predict_output_map.control.type          = appendMapfile
create_predict_output_map.control.mapfile_in    = create_sector_files_map.output.mapfile
create_predict_output_map.control.mapfile_dir   = input.output.mapfile_dir
create_predict_output_map.control.filename      = sector_files_output_map.mapfile
create_predict_output_map.control.append_index  = True
create_predict_output_map.control.append        = .sector

# expand the combined h5parms mapfile, length = 1 -> nsectors*nobs
expand_combined_h5parms_map.control.kind             = plugin
expand_combined_h5parms_map.control.type             = expandMapfile
expand_combined_h5parms_map.control.mapfile_in       = {{ h5parm_mapfile }}
expand_combined_h5parms_map.control.mapfile_to_match = create_sector_files_map.output.mapfile
expand_combined_h5parms_map.control.mapfile_dir      = input.output.mapfile_dir
expand_combined_h5parms_map.control.filename         = expand_h5parms_sectors.mapfile

# create a mapfile with the patches to predict for each sector, length = nsectors*nobs
create_sector_patches_map.control.kind        = plugin
create_sector_patches_map.control.type        = addListMapfile
create_sector_patches_map.control.hosts       = {{ hosts }}
create_sector_patches_map.control.files       = {{ sector_patches }}
create_sector_patches_map.control.mapfile_dir = input.output.mapfile_dir
create_sector_patches_map.control.filename    = sector_patches.mapfile
create_sector_patches_map.control.separator   = ;

# predict model visibilities, length = nsectors*nobs
# note that this step uses a lot of memory, so only one DPPP is run at a time
predict_model_data.control.type                                   = dppp_single
predict_model_data.control.mapfiles_in                            = [create_sector_files_map.output.mapfile,expand_sourcedbs_map.output.mapfile,expand_combined_h5parms_map.output.mapfile,create_sector_patches_map.output.mapfile]
predict_model_data.control.inputkeys                              = [msin,sourcedb,combined_h5parm,directions]
predict_model_data.control.mapfile_out                            = create_predict_output_map.output.mapfile
predict_model_data.argument.numthreads                            = {{ max_cpus_per_proc_single }}
predict_model_data.argument.msin.datacolumn                       = DATA
predict_model_data.argument.msout.overwrite                       = True
predict_model_data.argument.msout.writefullresflag                = False
predict_model_data.argument.steps                                 = [predict]
predict_model_data.argument.predict.type                          = h5parmpredict
predict_model_data.argument.predict.sourcedb                      = sourcedb
predict_model_data.argument.predict.operation                     = replace
predict_model_data.argument.predict.applycal.parmdb               = combined_h5parm
# Note: the following parameter seems to be needed but is not used
predict_model_data.argument.predict.applycal.correction           = screentec000
predict_model_data.argument.predict.directions                    = directions
{% if solve_tecandphase %}
{% if do_slowgain_solve %}
predict_model_data.argument.predict.applycal.steps                = [tec,phase,slowamp,slowphase]
predict_model_data.argument.predict.applycal.slowamp.correction   = amplitude000
predict_model_data.argument.predict.applycal.slowphase.correction = phase000
{% else %}
predict_model_data.argument.predict.applycal.steps                = [tec,phase]
{% endif %}
predict_model_data.argument.predict.applycal.tec.correction       = screentec000
predict_model_data.argument.predict.applycal.phase.correction     = screenphase000
{% else %}
{% if do_slowgain_solve %}
predict_model_data.argument.predict.applycal.steps                = [tec,slowamp,slowphase]
predict_model_data.argument.predict.applycal.slowamp.correction   = amplitude000
predict_model_data.argument.predict.applycal.slowphase.correction = phase000
{% else %}
predict_model_data.argument.predict.applycal.steps                = [tec]
{% endif %}
predict_model_data.argument.predict.applycal.tec.correction       = screentec000
{% endif %}
{% if use_compression %}
predict_model_data.argument.msout.storagemanager                  = "Dysco"
predict_model_data.argument.msout.storagemanager.databitrate      = 0
predict_model_data.argument.msout.storagemanager.weightbitrate    = 12
predict_model_data.argument.msout.storagemanager.distribution     = "TruncatedGaussian"
predict_model_data.argument.msout.storagemanager.disttruncation   = 1.5
predict_model_data.argument.msout.storagemanager.normalization    = "AF"
{% endif %}

# create a mapfile with the MS filenames for each obs, length = nobs
create_obs_files_map.control.kind        = plugin
create_obs_files_map.control.type        = addListMapfile
create_obs_files_map.control.hosts       = {{ hosts }}
create_obs_files_map.control.files       = {{ obs_filename }}
create_obs_files_map.control.mapfile_dir = input.output.mapfile_dir
create_obs_files_map.control.filename    = obsfiles.mapfile

# for each obs, loop over sectors and subtract the model visibilities of all other sectors, length = nobs
subtract_models.control.type           = subtract_sector_models
subtract_models.control.mapfile_in     = create_obs_files_map.output.mapfile
subtract_models.control.inputkey       = infile
subtract_models.argument.flags         = [infile,.sector]
subtract_models.argument.nr_outliers   = {{ nr_outliers }}
subtract_models.argument.peel_outliers = {{ peel_outliers }}
