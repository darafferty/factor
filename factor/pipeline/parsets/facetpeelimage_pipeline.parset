pipeline.steps = [update_mapfile_hosts, create_ms_map, create_msmulti_map, create_parmdb_map, expand_merged_parmdb_map, create_full_skymodels_map, make_facet_skymodels_all, make_sourcedb_all_facet_sources, expand_sourcedb_all_facet_sources, add_all_facet_sources, shift_and_average, create_compressed_mapfile, sort_into_Groups, sort_into_Groups_maps, concat_averaged_compressed_map, premask, wsclean_image_full1, create_imagebase_map1, adjust_wsclean_mapfile1, mask, wsclean_image_full2, create_imagebase_map2, adjust_wsclean_mapfile2, create_model_map, pad_model_images, create_add_all_compressed_mapfile, add_model_data_col, sort_add_all_into_Groups, sort_add_all_into_Groups_maps, create_expanded_model_mapfile, expand_facet_model_size_map, wsclean_ft, corrupt_final_model, subtract_facet_model]

pipeline.pluginpath                                     =   {{ pipeline_dir }}/plugins

# update host entries in all mapfiles
update_mapfile_hosts.control.kind                       =   plugin
update_mapfile_hosts.control.type                       =   updateHosts
update_mapfile_hosts.control.mapfile_dir                =   input.output.mapfile_dir
update_mapfile_hosts.control.hosts                      =   {{ hosts }}

# create a mapfile with all single MSs from supplied list, length = nfiles
create_ms_map.control.kind                              =   plugin
create_ms_map.control.type                              =   addListMapfile
create_ms_map.control.hosts                             =   {{ hosts }}
create_ms_map.control.files                             =   {{ ms_files_single }}
create_ms_map.control.mapfile_dir                       =   input.output.mapfile_dir
create_ms_map.control.filename                          =   input_bands.mapfile

# create a multi-mapfile with the groups of MSs from supplied list, length = nbands
create_msmulti_map.control.kind                         =   plugin
create_msmulti_map.control.type                         =   addListMultiMapfile
create_msmulti_map.control.hosts                        =   {{ hosts }}
create_msmulti_map.control.files                        =   {{ ms_files_grouped }}
create_msmulti_map.control.mapfile_dir                  =   input.output.mapfile_dir
create_msmulti_map.control.filename                     =   input_files_grouped.mapfile

# create a mapfile with the direction-independent parmDBs from supplied list, length = nfiles
create_parmdb_map.control.kind                          =   plugin
create_parmdb_map.control.type                          =   addListMapfile
create_parmdb_map.control.hosts                         =   {{ hosts }}
create_parmdb_map.control.files                         =   {{ dir_indep_parmDBs }}
create_parmdb_map.control.mapfile_dir                   =   input.output.mapfile_dir
create_parmdb_map.control.filename                      =   dir_indep_instrument_parmdbs.mapfile

# expand mapfile of the dir-dependent parmDB to all files, length = nfiles
expand_merged_parmdb_map.control.kind                   =   plugin
expand_merged_parmdb_map.control.type                   =   expandMapfile
expand_merged_parmdb_map.control.mapfile_in             =   {{ dir_dep_parmdb_mapfile }}
expand_merged_parmdb_map.control.mapfile_to_match       =   create_ms_map.output.mapfile
expand_merged_parmdb_map.control.mapfile_dir            =   input.output.mapfile_dir
expand_merged_parmdb_map.control.filename               =   expand_merged_parmdbs.mapfile

# create a mapfile with the current skymodels from supplied list, length = nbands
create_full_skymodels_map.control.kind                  =   plugin
create_full_skymodels_map.control.type                  =   addListMapfile
create_full_skymodels_map.control.hosts                 =   {{ hosts }}
create_full_skymodels_map.control.files                 =   {{ skymodels }}
create_full_skymodels_map.control.mapfile_dir           =   input.output.mapfile_dir
create_full_skymodels_map.control.filename              =   full_skymodels.mapfile

# extract the skymodel for this facet from global skymodel, length = nbands
make_facet_skymodels_all.control.type                   =   make_facet_skymodel
make_facet_skymodels_all.control.mapfile_in             =   create_full_skymodels_map.output.mapfile
make_facet_skymodels_all.control.inputkey               =   fullmodelfile
make_facet_skymodels_all.control.outputkey              =   outfile
make_facet_skymodels_all.argument.flags                 =   [fullmodelfile,outfile,{{ vertices_file }}]
make_facet_skymodels_all.argument.remove_cal            =   True

# convert the facet skymodel into a sourcedb, length = nbands
make_sourcedb_all_facet_sources.control.type            =   make_sourcedb
make_sourcedb_all_facet_sources.control.opts.mapfile_in =   make_facet_skymodels_all.output.mapfile
make_sourcedb_all_facet_sources.control.opts.inputkey   =   in
make_sourcedb_all_facet_sources.argument.format         =   <
make_sourcedb_all_facet_sources.argument.outtype        =   blob

# expand the sourcedb mapfile so that there is one entry for every file, length = nfiles
expand_sourcedb_all_facet_sources.control.kind          =   plugin
expand_sourcedb_all_facet_sources.control.type          =   mapfileSingleToGroup
expand_sourcedb_all_facet_sources.control.mapfile_in    =   make_sourcedb_all_facet_sources.output.mapfile
expand_sourcedb_all_facet_sources.control.mapfile_groups=   create_msmulti_map.output.mapfile
expand_sourcedb_all_facet_sources.control.mapfile_dir   =   input.output.mapfile_dir
expand_sourcedb_all_facet_sources.control.filename      =   expand_sourcedb_all_facet_sources.mapfile

# Add sources, but don't phase shift. We will use these data later        / length = nfiles
# to subtract the outlier model using the direction-dependent calibration
# to create improved "empty" datasets
add_all_facet_sources.control.type                      =   dppp
add_all_facet_sources.control.opts.mapfiles_in          =   [create_ms_map.output.mapfile,expand_sourcedb_all_facet_sources.output.mapfile,create_parmdb_map.output.mapfile]
add_all_facet_sources.control.opts.inputkeys            =   [msin,sourcedb,parmdb]
add_all_facet_sources.argument.numthreads               =   {{ max_cpus_per_io_proc_nfiles }}
add_all_facet_sources.argument.msin.datacolumn          =   SUBTRACTED_DATA_ALL_NEW
add_all_facet_sources.argument.msout.overwrite          =   True
add_all_facet_sources.argument.msout.writefullresflag   =   False
add_all_facet_sources.argument.local_scratch_dir        =   {{ local_dir }}
add_all_facet_sources.argument.steps                    =   [add]
add_all_facet_sources.argument.add.type                 =   predict
add_all_facet_sources.argument.add.sourcedb             =   sourcedb
add_all_facet_sources.argument.add.operation            =   add
add_all_facet_sources.argument.add.applycal.parmdb      =   parmdb

# Phase shift, correct, and average in preparation for imaging, length = nfiles
shift_and_average.control.type                          =   dppp
shift_and_average.control.opts.mapfiles_in              =   [add_all_facet_sources.output.mapfile,expand_merged_parmdb_map.output.mapfile]
shift_and_average.control.opts.inputkeys                =   [msin,dir_dep_parmdb]
shift_and_average.argument.numthreads                   =   {{ max_cpus_per_io_proc_nfiles }}
shift_and_average.argument.msin.datacolumn              =   DATA
shift_and_average.argument.msout.overwrite              =   True
shift_and_average.argument.msout.writefullresflag       =   False
shift_and_average.argument.local_scratch_dir            =   {{ local_dir }}
shift_and_average.argument.steps                        =   [shift,correct_fast1,correct_fast2,correct_slow,flagzero,avg]
shift_and_average.argument.shift.type                   =   phaseshifter
shift_and_average.argument.shift.phasecenter            =   [{{ facet_ra }}deg, {{ facet_dec }}deg]
shift_and_average.argument.correct_fast1.type           =   applycal
shift_and_average.argument.correct_fast1.parmdb         =   dir_dep_parmdb
shift_and_average.argument.correct_fast1.correction     =   tec
shift_and_average.argument.correct_fast1.invert         =   True
shift_and_average.argument.correct_fast2.type           =   applycal
shift_and_average.argument.correct_fast2.parmdb         =   dir_dep_parmdb
shift_and_average.argument.correct_fast2.correction     =   commonscalarphase
shift_and_average.argument.correct_fast2.invert         =   True
shift_and_average.argument.correct_slow.type            =   applycal
shift_and_average.argument.correct_slow.parmdb          =   dir_dep_parmdb
shift_and_average.argument.correct_slow.invert          =   True
shift_and_average.argument.flagzero.type                =   preflagger
shift_and_average.argument.flagzero.amplmin             =   1e-20
shift_and_average.argument.avg.type                     =   squash
shift_and_average.argument.avg.freqstep                 =   {{ facetimage_freqstep }}
shift_and_average.argument.avg.timestep                 =   {{ facetimage_timestep }}

# make the compressed mapfile, length = 1
create_compressed_mapfile.control.kind                  =   plugin
create_compressed_mapfile.control.type                  =   compressMapfile
create_compressed_mapfile.control.mapfile_in            =   shift_and_average.output.mapfile
create_compressed_mapfile.control.mapfile_dir           =   input.output.mapfile_dir
create_compressed_mapfile.control.filename              =   concat_averaged_input.mapfile

# sort compressed mapfile so that there is one group per timestamp, length = ntimes
sort_into_Groups.control.type                           =   sort_times_into_freqGroups
sort_into_Groups.argument.flags                         =   [create_compressed_mapfile.output.mapfile]
sort_into_Groups.argument.filename                      =   sorted_groups.mapfile
sort_into_Groups.argument.mapfile_dir                   =   input.output.mapfile_dir
sort_into_Groups.argument.hosts                         =   {{ hosts }}
sort_into_Groups.argument.stepname                      =   sort_into_Groups
sort_into_Groups.argument.nband_pad                     =   {{ nband_pad }}
sort_into_Groups.argument.make_dummy_files              =   True

# convert the output of sort_into_Groups into usable mapfiles, len = 1 / ntimes
sort_into_Groups_maps.control.kind                      =   plugin
sort_into_Groups_maps.control.type                      =   mapfilenamesFromMapfiles
sort_into_Groups_maps.control.mapfile_groupmap          =   sort_into_Groups.output.groupmapfile.mapfile
sort_into_Groups_maps.control.mapfile_filesmap          =   sort_into_Groups.output.mapfile.mapfile

# make a compressed mapfile of the concatenated data, length = 1
concat_averaged_compressed_map.control.kind             =   plugin
concat_averaged_compressed_map.control.type             =   compressMapfile
concat_averaged_compressed_map.control.mapfile_in       =   sort_into_Groups_maps.output.filesmap
concat_averaged_compressed_map.control.mapfile_dir      =   input.output.mapfile_dir
concat_averaged_compressed_map.control.filename         =   concat_averaged_compressed.mapfile

# Make a preliminary clean mask from the facet region, length = 1
premask.control.type                                    =   make_clean_mask
premask.control.mapfile_in                              =   concat_averaged_compressed_map.output.mapfile
premask.control.inputkey                                =   imagefile
premask.control.outputkey                               =   maskfile
premask.argument.flags                                  =   [imagefile,maskfile]
premask.argument.img_format                             =   fits
premask.argument.pad_to_size                            =   {{ facet_imsize }}
premask.argument.skip_source_detection                  =   True
premask.argument.vertices_file                          =   {{ vertices_file }}
premask.argument.reference_ra_deg                       =   {{ facet_ra }}
premask.argument.reference_dec_deg                      =   {{ facet_dec }}
premask.argument.cellsize_deg                           =   {{ cellsize_facet_deg }}
premask.argument.make_blank_image                       =   True

# do the first round of imaging, length = 1
wsclean_image_full1.control.type                        =   wsclean
wsclean_image_full1.control.mapfiles_in                 =   [concat_averaged_compressed_map.output.mapfile,premask.output.mapfile]
wsclean_image_full1.control.inputkeys                   =   [msfile,fitsmask]
wsclean_image_full1.argument.flags                      =   [-no-update-model-required,{{ wsclean_multiscale }}-fitbeam,-reorder,-joinchannels,msfile]
wsclean_image_full1.argument.fitsmask                   =   fitsmask
wsclean_image_full1.argument.size                       =   {{ facet_imsize }} {{ facet_imsize }}
wsclean_image_full1.argument.niter                      =   {{ wsclean_full1_image_niter }}
wsclean_image_full1.argument.threshold                  =   {{ wsclean_full1_image_threshold_jy }}
wsclean_image_full1.argument.pol                        =   I
wsclean_image_full1.argument.weight                     =   briggs {{ robust_facet }}
wsclean_image_full1.argument.mgain                      =   0.6
wsclean_image_full1.argument.cleanborder                =   0
wsclean_image_full1.argument.minuv-l                    =   {{ facet_min_uv_lambda }}
wsclean_image_full1.argument.scale                      =   {{ cellsize_facet_deg }}
wsclean_image_full1.argument.channelsout                =   {{ wsclean_nchannels }}
wsclean_image_full1.argument.mem                        =   {{ max_percent_memory_per_proc_single }}
wsclean_image_full1.argument.j                          =   {{ max_cpus_per_proc_single }}
wsclean_image_full1.argument.tempdir                    =   {{ local_dir }}
wsclean_image_full1.argument.weighting-rank-filter      =   3
{% if taper_facet_arcsec > 0.0 %}
wsclean_image_full1.argument.taper-gaussian             =   {{ taper_facet_arcsec }}
{% endif %}
{% if facetimage_wsclean_nwavelengths > 0.0 %}
wsclean_image_full1.argument.baseline-averaging         =   {{ facetimage_wsclean_nwavelengths }}
{% endif %}

# make a mapfile with the root-name of the WSClean images, length = 1
create_imagebase_map1.control.kind                      =   plugin
create_imagebase_map1.control.type                      =   trimMapfile
create_imagebase_map1.control.mapfile_in                =   wsclean_image_full1.output.wsclean_image_full1-image.fits.mapfile
create_imagebase_map1.control.trim                      =   -
create_imagebase_map1.control.mapfile_dir               =   input.output.mapfile_dir
create_imagebase_map1.control.filename                  =   wsclean1_image_rootnames.mapfile

# make a mapfile with the name of the WSClean image, length = 1
adjust_wsclean_mapfile1.control.kind                    =   plugin
adjust_wsclean_mapfile1.control.type                    =   appendMapfile
adjust_wsclean_mapfile1.control.mapfile_in              =   create_imagebase_map1.output.mapfile
adjust_wsclean_mapfile1.control.append                  =   {{ wsclean_suffix }}
adjust_wsclean_mapfile1.control.mapfile_dir             =   input.output.mapfile_dir
adjust_wsclean_mapfile1.control.filename                =   image1.mapfile

# make a mask from the image, length = 1
mask.control.type                                       =   make_clean_mask
mask.control.mapfile_in                                 =   adjust_wsclean_mapfile1.output.mapfile
mask.control.inputkey                                   =   imagefile
mask.control.outputkey                                  =   maskfile
mask.argument.flags                                     =   [imagefile,maskfile]
mask.argument.region_file                               =   {{ region_field }}
mask.argument.threshisl                                 =   3
mask.argument.threshpix                                 =   5
mask.argument.rmsbox                                    =   (300,100)
mask.argument.rmsbox_bright                             =   (70,10)
mask.argument.atrous_jmax                               =   3
mask.argument.adaptive_rmsbox                           =   True
mask.argument.img_format                                =   fits
mask.argument.vertices_file                             =   {{ vertices_file }}

# second round of imaging with the mask, length = 1
wsclean_image_full2.control.type                        =   wsclean
wsclean_image_full2.control.mapfiles_in                 =   [concat_averaged_compressed_map.output.mapfile,mask.output.mapfile,mask.output.threshold_5sig.mapfile]
wsclean_image_full2.control.inputkeys                   =   [msfile,fitsmask,threshold]
wsclean_image_full2.argument.flags                      =   [-no-update-model-required,{{ wsclean_multiscale }}-fitbeam,-reorder,-joinchannels,msfile]
wsclean_image_full2.argument.fitsmask                   =   fitsmask
wsclean_image_full2.argument.size                       =   {{ facet_imsize }} {{ facet_imsize }}
wsclean_image_full2.argument.niter                      =   {{ wsclean_full2_image_niter }}
wsclean_image_full2.argument.threshold                  =   threshold
wsclean_image_full2.argument.pol                        =   I
wsclean_image_full2.argument.weight                     =   briggs {{ robust_facet }}
wsclean_image_full2.argument.mgain                      =   0.6
wsclean_image_full2.argument.cleanborder                =   0
wsclean_image_full2.argument.minuv-l                    =   {{ facet_min_uv_lambda }}
wsclean_image_full2.argument.scale                      =   {{ cellsize_facet_deg }}
wsclean_image_full2.argument.channelsout                =   {{ wsclean_nchannels }}
wsclean_image_full2.argument.mem                        =   {{ max_percent_memory_per_proc_single }}
wsclean_image_full2.argument.j                          =   {{ max_cpus_per_proc_single }}
wsclean_image_full2.argument.tempdir                    =   {{ local_dir }}
wsclean_image_full2.argument.weighting-rank-filter      =   3
{% if taper_facet_arcsec > 0.0 %}
wsclean_image_full2.argument.taper-gaussian             =   {{ taper_facet_arcsec }}
{% endif %}
{% if facetimage_wsclean_nwavelengths > 0.0 %}
wsclean_image_full2.argument.baseline-averaging         =   {{ facetimage_wsclean_nwavelengths }}
{% endif %}

# make a mapfile with the root-name of the WSClean images, length = 1
create_imagebase_map2.control.kind                      =   plugin
create_imagebase_map2.control.type                      =   trimMapfile
create_imagebase_map2.control.mapfile_in                =   wsclean_image_full2.output.wsclean_image_full2-image.fits.mapfile
create_imagebase_map2.control.trim                      =   -
create_imagebase_map2.control.mapfile_dir               =   input.output.mapfile_dir
create_imagebase_map2.control.filename                  =   wsclean2_image_rootnames.mapfile

# make a mapfile with the name of the WSClean image at a known name, length = 1
adjust_wsclean_mapfile2.control.kind                    =   plugin
adjust_wsclean_mapfile2.control.type                    =   appendMapfile
adjust_wsclean_mapfile2.control.mapfile_in              =   create_imagebase_map2.output.mapfile
adjust_wsclean_mapfile2.control.append                  =   {{ wsclean_suffix }}
adjust_wsclean_mapfile2.control.mapfile_dir             =   input.output.mapfile_dir
adjust_wsclean_mapfile2.control.filename                =   final_image.mapfile

# make a mapfile with the root-name of the final WSClean images, length = 1
create_model_map.control.kind                           =   plugin
create_model_map.control.type                           =   trimMapfile
create_model_map.control.mapfile_in                     =   wsclean_image_full2.output.wsclean_image_full2-model.fits.mapfile
create_model_map.control.trim                           =   -
create_model_map.control.mapfile_dir                    =   input.output.mapfile_dir
create_model_map.control.filename                       =   final_model_rootnames.mapfile

# pad the model image with zeros, length = 1
pad_model_images.control.type                           =   pad_image
pad_model_images.control.mapfile_in                     =   create_model_map.output.mapfile
pad_model_images.control.inputkey                       =   imagefile
pad_model_images.argument.flags                         =   [imagefile,{{ wsclean_model_padding }}]

# make a compressed mapfile of the "add_all" unaveraged data, length = 1
create_add_all_compressed_mapfile.control.kind          =   plugin
create_add_all_compressed_mapfile.control.type          =   compressMapfile
create_add_all_compressed_mapfile.control.mapfile_in    =   add_all_facet_sources.output.mapfile
create_add_all_compressed_mapfile.control.mapfile_dir   =   input.output.mapfile_dir
create_add_all_compressed_mapfile.control.filename      =   concat_add_all_input.mapfile

# add MODEL_DATA column to add_all MSs, length = nfiles
# because the sort_add_all_into_Groups step below makes dummy files,
# we need to add this column first so that the dummy files have them too
add_model_data_col.control.type                         =   add_model_data_column
add_model_data_col.control.mapfile_in                   =   add_all_facet_sources.output.mapfile
add_model_data_col.control.inputkey                     =   msfile
add_model_data_col.argument.flags                       =   [msfile]

# sort compressed mapfile so that there is one group per timestamp, length = ntimes
sort_add_all_into_Groups.control.type                   =   sort_times_into_freqGroups
sort_add_all_into_Groups.argument.flags                 =   [create_add_all_compressed_mapfile.output.mapfile]
sort_add_all_into_Groups.argument.filename              =   sorted_add_all_groups.mapfile
sort_add_all_into_Groups.argument.mapfile_dir           =   input.output.mapfile_dir
sort_add_all_into_Groups.argument.hosts                 =   {{ hosts }}
sort_add_all_into_Groups.argument.stepname              =   sort_add_all_into_Groups
sort_add_all_into_Groups.argument.nband_pad             =   {{ nband_pad }}
sort_add_all_into_Groups.argument.make_dummy_files      =   True

# convert the output of sort_into_Groups into usable mapfiles, len = 1 / ntimes
sort_add_all_into_Groups_maps.control.kind              =   plugin
sort_add_all_into_Groups_maps.control.type              =   mapfilenamesFromMapfiles
sort_add_all_into_Groups_maps.control.mapfile_groupmap  =   sort_add_all_into_Groups.output.groupmapfile.mapfile
sort_add_all_into_Groups_maps.control.mapfile_filesmap  =   sort_add_all_into_Groups.output.mapfile.mapfile

# expand the mapfile of the model image to all files, length = ntimes
create_expanded_model_mapfile.control.kind              =   plugin
create_expanded_model_mapfile.control.type              =   expandMapfile
create_expanded_model_mapfile.control.mapfile_in        =   create_model_map.output.mapfile
create_expanded_model_mapfile.control.mapfile_to_match  =   sort_add_all_into_Groups_maps.output.groupmap
create_expanded_model_mapfile.control.mapfile_dir       =   input.output.mapfile_dir
create_expanded_model_mapfile.control.filename          =   expand_wsclean_model.mapfile

# expand mapfile of the model image sizes to all groups, length = ntimes
expand_facet_model_size_map.control.kind                =   plugin
expand_facet_model_size_map.control.type                =   expandMapfile
expand_facet_model_size_map.control.mapfile_in          =   pad_model_images.output.padsize.mapfile
expand_facet_model_size_map.control.mapfile_to_match    =   sort_add_all_into_Groups_maps.output.groupmap
expand_facet_model_size_map.control.mapfile_dir         =   input.output.mapfile_dir
expand_facet_model_size_map.control.filename            =   expand_facet_model_size.mapfile

# make model visibilities, length = ntimes
# For WSClean predict, we need to increase the number of wplanes so that the
# effective model image size is larger than the FOV (to prevent aliasing issues)
wsclean_ft.control.type                                 =   wsclean_ft
wsclean_ft.control.mapfiles_in                          =   [sort_add_all_into_Groups_maps.output.filesmap,create_expanded_model_mapfile.output.mapfile,expand_facet_model_size_map.output.mapfile]
wsclean_ft.control.inputkeys                            =   [msfile,name,size]
wsclean_ft.argument.flags                               =   [-predict,msfile]
wsclean_ft.argument.scale                               =   {{ cellsize_facet_deg }}
wsclean_ft.argument.mem                                 =   {{ max_percent_memory_per_proc_ntimes }}
wsclean_ft.argument.channelsout                         =   {{ wsclean_nchannels }}
wsclean_ft.argument.j                                   =   {{ max_cpus_per_proc_ntimes }}
wsclean_ft.argument.tempdir                             =   {{ local_dir }}
wsclean_ft.argument.nwlayers-for-size                   =   12288 12288

# corrupt the model visibilities, length = nfiles
corrupt_final_model.control.type                        =   dppp
corrupt_final_model.control.opts.mapfiles_in            =   [add_all_facet_sources.output.mapfile,expand_merged_parmdb_map.output.mapfile]
corrupt_final_model.control.opts.inputkeys              =   [msin,parmdb]
corrupt_final_model.argument.numthreads                 =   {{ max_cpus_per_io_proc_nfiles }}
corrupt_final_model.argument.msin.datacolumn            =   MODEL_DATA
corrupt_final_model.argument.msout.overwrite            =   True
corrupt_final_model.argument.msout.writefullresflag     =   False
corrupt_final_model.argument.local_scratch_dir          =   {{ local_dir }}
corrupt_final_model.argument.steps                      =   [corrupt_fast1,corrupt_fast2,corrupt_slow]
corrupt_final_model.argument.corrupt_fast1.type         =   applycal
corrupt_final_model.argument.corrupt_fast1.parmdb       =   parmdb
corrupt_final_model.argument.corrupt_fast1.correction   =   tec
corrupt_final_model.argument.corrupt_fast1.invert       =   False
corrupt_final_model.argument.corrupt_fast2.type         =   applycal
corrupt_final_model.argument.corrupt_fast2.parmdb       =   parmdb
corrupt_final_model.argument.corrupt_fast2.correction   =   commonscalarphase
corrupt_final_model.argument.corrupt_fast2.invert       =   False
corrupt_final_model.argument.corrupt_slow.type          =   applycal
corrupt_final_model.argument.corrupt_slow.parmdb        =   parmdb
corrupt_final_model.argument.corrupt_slow.correction    =   gain
corrupt_final_model.argument.corrupt_slow.invert        =   False

# Subtract the corrupted model from the data to make improved subtracted datasets, length = nfiles
subtract_facet_model.control.type                       =   add_subtract_columns
subtract_facet_model.control.opts.mapfiles_in           =   [add_all_facet_sources.output.mapfile,corrupt_final_model.output.mapfile]
subtract_facet_model.control.opts.inputkeys             =   [file1,file2]
subtract_facet_model.argument.flags                     =   [file1,file2,DATA,DATA,SUBTRACTED_DATA_ALL,subtract,True]
