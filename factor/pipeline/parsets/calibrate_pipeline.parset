{% if do_slowgain_solve %}
pipeline.steps = [update_mapfile_hosts, create_timechunk_files_map, create_freqchunk_files_map, create_starttime_map, create_ntimes_map, create_slow_starttime_map, create_slow_ntimes_map, create_startchan_map, create_nchan_map, create_fast_timestep_map, create_slow_timestep_map, create_fast_freqstep_map, create_slow_freqstep_map, create_fast_h5parms_map, create_slow_h5parms_map, {% if apply_previous_slowgains %} create_prev_slow_h5parms_map, {% endif %} create_skymodel_map, make_sourcedb, expand_sourcedb_mapfile_time, expand_sourcedb_mapfile_freq, solve_fast_phases, create_compressed_mapfile_fast, create_fast_output_map, combine_fast_phases, fit_fast_screens, create_fast_aterms_output_map, make_fast_aterms, expand_fast_phases_mapfile, solve_slow_gains, create_compressed_mapfile_slow, create_slow_output_map, combine_slow_gains, fit_slow_screens, create_slow_aterms_output_map, make_slow_aterms, create_combined_output_map, combine_h5parms]
{% else %}
pipeline.steps = [update_mapfile_hosts, create_timechunk_files_map, create_starttime_map, create_ntimes_map, create_fast_timestep_map, create_slow_timestep_map, create_fast_freqstep_map, create_fast_h5parms_map, create_skymodel_map, make_sourcedb, expand_sourcedb_mapfile_time, expand_sourcedb_mapfile_freq, solve_fast_phases, create_compressed_mapfile_fast, create_fast_output_map, combine_fast_phases, fit_fast_screens]
{% endif %}

pipeline.pluginpath = {{ pipeline_dir }}/plugins

# update host entries in all mapfiles
update_mapfile_hosts.control.kind        = plugin
update_mapfile_hosts.control.type        = updateHosts
update_mapfile_hosts.control.mapfile_dir = input.output.mapfile_dir
update_mapfile_hosts.control.hosts       = {{ hosts }}

# create a mapfile of each time chunk's filename, length = ntimechunks
create_timechunk_files_map.control.kind        = plugin
create_timechunk_files_map.control.type        = addListMapfile
create_timechunk_files_map.control.hosts       = {{ hosts }}
create_timechunk_files_map.control.files       = {{ timechunk_filename }}
create_timechunk_files_map.control.mapfile_dir = input.output.mapfile_dir
create_timechunk_files_map.control.filename    = timefiles.mapfile

# create a mapfile of each frequency chunk's filename, length = nfreqchunks
create_freqchunk_files_map.control.kind        = plugin
create_freqchunk_files_map.control.type        = addListMapfile
create_freqchunk_files_map.control.hosts       = {{ hosts }}
create_freqchunk_files_map.control.files       = {{ freqchunk_filename }}
create_freqchunk_files_map.control.mapfile_dir = input.output.mapfile_dir
create_freqchunk_files_map.control.filename    = freqfiles.mapfile

# create a mapfile with each time chunk's starttime value, length = ntimechunks
create_starttime_map.control.kind        = plugin
create_starttime_map.control.type        = addListMapfile
create_starttime_map.control.hosts       = {{ hosts }}
create_starttime_map.control.files       = {{ starttime }}
create_starttime_map.control.mapfile_dir = input.output.mapfile_dir
create_starttime_map.control.filename    = starttime.mapfile

# create a mapfile with each time chunk's ntimes value, length = ntimechunks
create_ntimes_map.control.kind        = plugin
create_ntimes_map.control.type        = addListMapfile
create_ntimes_map.control.hosts       = {{ hosts }}
create_ntimes_map.control.files       = {{ ntimes }}
create_ntimes_map.control.mapfile_dir = input.output.mapfile_dir
create_ntimes_map.control.filename    = ntimes.mapfile

# create a mapfile with each time chunk's starttime value, length = ntimechunks
create_slow_starttime_map.control.kind        = plugin
create_slow_starttime_map.control.type        = addListMapfile
create_slow_starttime_map.control.hosts       = {{ hosts }}
create_slow_starttime_map.control.files       = {{ slow_starttime }}
create_slow_starttime_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_starttime_map.control.filename    = slow_starttime.mapfile

# create a mapfile with each time chunk's ntimes value, length = ntimechunks
create_slow_ntimes_map.control.kind        = plugin
create_slow_ntimes_map.control.type        = addListMapfile
create_slow_ntimes_map.control.hosts       = {{ hosts }}
create_slow_ntimes_map.control.files       = {{ slow_ntimes }}
create_slow_ntimes_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_ntimes_map.control.filename    = slow_ntimes.mapfile

# create a mapfile with each frequency chunk's startchan value, length = nfreqchunks*nobs
create_startchan_map.control.kind        = plugin
create_startchan_map.control.type        = addListMapfile
create_startchan_map.control.hosts       = {{ hosts }}
create_startchan_map.control.files       = {{ startchan }}
create_startchan_map.control.mapfile_dir = input.output.mapfile_dir
create_startchan_map.control.filename    = startchan.mapfile

# create a mapfile with each frequency chunk's nchan value, length = nfreqchunks*nobs
create_nchan_map.control.kind        = plugin
create_nchan_map.control.type        = addListMapfile
create_nchan_map.control.hosts       = {{ hosts }}
create_nchan_map.control.files       = {{ nchan }}
create_nchan_map.control.mapfile_dir = input.output.mapfile_dir
create_nchan_map.control.filename    = nchan.mapfile

# create a mapfile with each time chunk's fast_timestep value, length = ntimechunks*nobs
create_fast_timestep_map.control.kind        = plugin
create_fast_timestep_map.control.type        = addListMapfile
create_fast_timestep_map.control.hosts       = {{ hosts }}
create_fast_timestep_map.control.files       = {{ solint_fast_timestep }}
create_fast_timestep_map.control.mapfile_dir = input.output.mapfile_dir
create_fast_timestep_map.control.filename    = fast_timestep.mapfile

# create a mapfile with each frequency chunk's slow_timestep value, length = nfreqchunks*nobs
create_slow_timestep_map.control.kind        = plugin
create_slow_timestep_map.control.type        = addListMapfile
create_slow_timestep_map.control.hosts       = {{ hosts }}
create_slow_timestep_map.control.files       = {{ solint_slow_timestep }}
create_slow_timestep_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_timestep_map.control.filename    = slow_timestep.mapfile

# create a mapfile with each time chunk's fast_freqstep value, length = ntimechunks
create_fast_freqstep_map.control.kind        = plugin
create_fast_freqstep_map.control.type        = addListMapfile
create_fast_freqstep_map.control.hosts       = {{ hosts }}
create_fast_freqstep_map.control.files       = {{ solint_fast_freqstep }}
create_fast_freqstep_map.control.mapfile_dir = input.output.mapfile_dir
create_fast_freqstep_map.control.filename    = fast_freqstep.mapfile

# create a mapfile with each frequency chunk's slow_freqstep value, length = nfreqchunks*nobs
create_slow_freqstep_map.control.kind        = plugin
create_slow_freqstep_map.control.type        = addListMapfile
create_slow_freqstep_map.control.hosts       = {{ hosts }}
create_slow_freqstep_map.control.files       = {{ solint_slow_freqstep }}
create_slow_freqstep_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_freqstep_map.control.filename    = slow_freqstep.mapfile

# create a mapfile with the output fast-phase h5parms from supplied list, length = ntimechunks
create_fast_h5parms_map.control.kind        = plugin
create_fast_h5parms_map.control.type        = addListMapfile
create_fast_h5parms_map.control.hosts       = {{ hosts }}
create_fast_h5parms_map.control.files       = {{ output_fast_h5parm }}
create_fast_h5parms_map.control.mapfile_dir = input.output.mapfile_dir
create_fast_h5parms_map.control.filename    = fast_h5parms.mapfile

# create a mapfile with the output slow-gain h5parms from supplied list, length = nfreqchunks*nobs
create_slow_h5parms_map.control.kind        = plugin
create_slow_h5parms_map.control.type        = addListMapfile
create_slow_h5parms_map.control.hosts       = {{ hosts }}
create_slow_h5parms_map.control.files       = {{ output_slow_h5parm }}
create_slow_h5parms_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_h5parms_map.control.filename    = slow_h5parms.mapfile

{% if apply_previous_slowgains %}
# generate solutions for current patches, length = 1
# output h5parm filename should be {{ prev_slow_h5parm }}, to match next step

# create a mapfile with the previous slow-gain h5parms from supplied list, length = nfreqchunks*nobs
create_prev_slow_h5parms_map.control.kind        = plugin
create_prev_slow_h5parms_map.control.type        = addListMapfile
create_prev_slow_h5parms_map.control.hosts       = {{ hosts }}
create_prev_slow_h5parms_map.control.files       = {{ prev_slow_h5parm }}
create_prev_slow_h5parms_map.control.mapfile_dir = input.output.mapfile_dir
create_prev_slow_h5parms_map.control.filename    = slow_h5parms.mapfile
{% endif %}

# create a mapfile with the current skymodel, length = 1
create_skymodel_map.control.kind        = plugin
create_skymodel_map.control.type        = addListMapfile
create_skymodel_map.control.hosts       = {{ hosts }}
create_skymodel_map.control.files       = [{{ calibration_skymodel_file }}]
create_skymodel_map.control.mapfile_dir = input.output.mapfile_dir
create_skymodel_map.control.filename    = skymodels.mapfile

# convert the skymodel into a sourcedb, length = 1
make_sourcedb.control.type       = make_sourcedb
make_sourcedb.control.mapfile_in = create_skymodel_map.output.mapfile
make_sourcedb.control.inputkey   = in
make_sourcedb.argument.format    = <
make_sourcedb.argument.outtype   = blob
make_sourcedb.argument.append    = False

# expand the sourcedb mapfile so that there is one entry for every time chunk, length = ntimechunks
expand_sourcedb_mapfile_time.control.kind             = plugin
expand_sourcedb_mapfile_time.control.type             = expandMapfile
expand_sourcedb_mapfile_time.control.mapfile_in       = make_sourcedb.output.mapfile
expand_sourcedb_mapfile_time.control.mapfile_to_match = create_timechunk_files_map.output.mapfile
expand_sourcedb_mapfile_time.control.mapfile_dir      = input.output.mapfile_dir
expand_sourcedb_mapfile_time.control.filename         = expand_sourcedb_time.mapfile

# expand the sourcedb mapfile so that there is one entry for every frequency chunk, length = nfreqchunks*nobs
expand_sourcedb_mapfile_freq.control.kind             = plugin
expand_sourcedb_mapfile_freq.control.type             = expandMapfile
expand_sourcedb_mapfile_freq.control.mapfile_in       = make_sourcedb.output.mapfile
expand_sourcedb_mapfile_freq.control.mapfile_to_match = create_freqchunk_files_map.output.mapfile
expand_sourcedb_mapfile_freq.control.mapfile_dir      = input.output.mapfile_dir
expand_sourcedb_mapfile_freq.control.filename         = expand_sourcedb_freq.mapfile

# solve for fast phases, length = ntimechunks
solve_fast_phases.control.type                      = dppp_inplace
{% if apply_previous_slowgains %}
solve_fast_phases.control.mapfiles_in               = [create_timechunk_files_map.output.mapfile,create_fast_h5parms_map.output.mapfile,create_starttime_map.output.mapfile,create_ntimes_map.output.mapfile,create_fast_timestep_map.output.mapfile,create_fast_freqstep_map.output.mapfile,expand_sourcedb_mapfile_time.output.mapfile,create_prev_slow_h5parms_map.output.mapfile]
solve_fast_phases.control.inputkeys                 = [msin,h5parm,starttime,ntimes,timestep,freqstep,sourcedb,slow_h5parm]
{% else %}
solve_fast_phases.control.mapfiles_in               = [create_timechunk_files_map.output.mapfile,create_fast_h5parms_map.output.mapfile,create_starttime_map.output.mapfile,create_ntimes_map.output.mapfile,create_fast_timestep_map.output.mapfile,create_fast_freqstep_map.output.mapfile,expand_sourcedb_mapfile_time.output.mapfile]
solve_fast_phases.control.inputkeys                 = [msin,h5parm,starttime,ntimes,timestep,freqstep,sourcedb]
{% endif %}
solve_fast_phases.control.max_per_node              = 1
solve_fast_phases.argument.numthreads               = {{ max_proc_per_node }}
solve_fast_phases.argument.msin.datacolumn          = {{ data_colname }}
solve_fast_phases.argument.msin.starttime           = starttime
solve_fast_phases.argument.msin.ntimes              = ntimes
solve_fast_phases.argument.msout                    = .
solve_fast_phases.argument.steps                    = [solve]
solve_fast_phases.argument.solve.type               = ddecal
solve_fast_phases.argument.solve.mode               = {{ mode }}
{% if mode == 'tecscreen' %}
solve_fast_phases.argument.solve.tecscreen.order    = {{ tecscreenorder }}
solve_fast_phases.argument.solve.tecscreen.mode     = station
{% endif %}
{% if use_beam %}
solve_fast_phases.argument.solve.usebeammodel       = True
{% endif %}
solve_fast_phases.argument.solve.h5parm             = h5parm
solve_fast_phases.argument.solve.sourcedb           = sourcedb
solve_fast_phases.argument.solve.solint             = timestep
solve_fast_phases.argument.solve.nchan              = freqstep
{% if mode == 'tec' %}
solve_fast_phases.argument.solve.approximatetec     = {{ approximatetec }}
solve_fast_phases.argument.solve.maxapproxiter      = {{ maxapproxiter }}
# solve_fast_phases.argument.solve.approxchunksize    = 5
{% endif %}
{% if apply_previous_slowgains %}
solve_fast_phases.argument.solve.applycal.parmdb           = slow_h5parm
solve_fast_phases.argument.solve.applycal.steps            = [amp,phase]
solve_fast_phases.argument.solve.applycal.amp.correction   = amplitude000
solve_fast_phases.argument.solve.applycal.phase.correction = phase000
{% endif %}
solve_fast_phases.argument.solve.maxiter            = {{ maxiter }}
solve_fast_phases.argument.solve.propagatesolutions = {{ propagatesolutions }}
solve_fast_phases.argument.solve.stepsize           = {{ stepsize }}
solve_fast_phases.argument.solve.tolerance          = {{ tolerance }}
solve_fast_phases.argument.solve.uvlambdamin        = {{ solve_min_uv_lambda }}

# compress fast-phase mapfile so that all files are in one group, length = 1
create_compressed_mapfile_fast.control.kind        = plugin
create_compressed_mapfile_fast.control.type        = compressMapfile
create_compressed_mapfile_fast.control.mapfile_in  = create_fast_h5parms_map.output.mapfile
create_compressed_mapfile_fast.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile_fast.control.filename    = compress_fast.mapfile

# create a mapfile for output of combine step, length = 1
create_fast_output_map.control.kind        = plugin
create_fast_output_map.control.type        = addListMapfile
create_fast_output_map.control.hosts       = {{ hosts }}
create_fast_output_map.control.files       = [input.output.working_directory/input.output.job_name/fast_phases.h5]
create_fast_output_map.control.mapfile_dir = input.output.mapfile_dir
create_fast_output_map.control.filename    = combine_fast_h5parms_output.mapfile

# collect all the fast-phase solutions, length = ntimechunks -> 1
combine_fast_phases.control.type        = collect_h5parms
combine_fast_phases.control.mapfile_in  = create_compressed_mapfile_fast.output.mapfile
combine_fast_phases.control.inputkey    = infiles
combine_fast_phases.control.mapfile_out = create_fast_output_map.output.mapfile
combine_fast_phases.control.outputkey   = outfile
combine_fast_phases.argument.flags      = [-c,infiles]
combine_fast_phases.argument.outh5parm  = outfile
{% if mode == 'tecscreen' %}
combine_fast_phases.argument.insoltab   = tec000
{% endif %}

# fit screens to fast phases, length = 1
# TODO: better to reweight, then split h5parm to allow parallel processing of screen fitting
fit_fast_screens.control.type         = fit_tec_screens
fit_fast_screens.control.mapfile_in   = combine_fast_phases.output.mapfile
fit_fast_screens.control.inputkey     = infile
fit_fast_screens.argument.flags       = [infile]
fit_fast_screens.argument.order       = {{ tecscreenorder }}

# create a mapfile for output of a-term step, length = 1
create_fast_aterms_output_map.control.kind        = plugin
create_fast_aterms_output_map.control.type        = addListMapfile
create_fast_aterms_output_map.control.hosts       = {{ hosts }}
create_fast_aterms_output_map.control.files       = [input.output.working_directory/input.output.job_name/fast_aterms]
create_fast_aterms_output_map.control.mapfile_dir = input.output.mapfile_dir
create_fast_aterms_output_map.control.filename    = fast_aterms_output.mapfile

# make a-term images for IDG, length = 1
# TODO: split h5parm and process in parallel
make_fast_aterms.control.type        = make_aterm_images
make_fast_aterms.control.mapfile_in  = fit_fast_screens.output.mapfile
make_fast_aterms.control.inputkey    = infile
make_fast_aterms.control.mapfile_out = create_fast_aterms_output_map.output.mapfile
make_fast_aterms.control.outputkey   = outroot
make_fast_aterms.argument.flags      = [infile,origtec000,outroot,{{ sector_bounds_deg }},{{ sector_bounds_mid_deg }}]
make_fast_aterms.argument.smooth     = 3
make_fast_aterms.argument.gsize      = 5

{% if do_slowgain_solve %}

# expand the fast-phase mapfile so that there is one entry for every frequency chunk, length = nfreqchunks*nobs
expand_fast_phases_mapfile.control.kind             = plugin
expand_fast_phases_mapfile.control.type             = expandMapfile
expand_fast_phases_mapfile.control.mapfile_in       = combine_fast_phases.output.mapfile
expand_fast_phases_mapfile.control.mapfile_to_match = create_freqchunk_files_map.output.mapfile
expand_fast_phases_mapfile.control.mapfile_dir      = input.output.mapfile_dir
expand_fast_phases_mapfile.control.filename         = expand_fastphase_freq.mapfile

# solve for slow gains, length = nfreqchunks*nobs
solve_slow_gains.control.type                           = dppp_inplace
solve_slow_gains.control.mapfiles_in                    = [create_freqchunk_files_map.output.mapfile,create_slow_starttime_map.output.mapfile,create_slow_ntimes_map.output.mapfile,expand_fast_phases_mapfile.output.mapfile,create_slow_h5parms_map.output.mapfile,create_startchan_map.output.mapfile,create_nchan_map.output.mapfile,create_slow_timestep_map.output.mapfile,create_slow_freqstep_map.output.mapfile,expand_sourcedb_mapfile_freq.output.mapfile]
solve_slow_gains.control.inputkeys                      = [msin,starttime,ntimes,fast_h5parm,slow_h5parm,startchan,nchan,timestep,freqstep,sourcedb]
solve_slow_gains.control.max_per_node                   = 1
solve_slow_gains.argument.numthreads                    = {{ max_proc_per_node }}
solve_slow_gains.argument.msin.datacolumn               = {{ data_colname }}
solve_slow_gains.argument.msin.starttime                = starttime
solve_slow_gains.argument.msin.ntimes                   = ntimes
solve_slow_gains.argument.msin.startchan                = startchan
solve_slow_gains.argument.msin.nchan                    = nchan
solve_slow_gains.argument.msout                         = .
solve_slow_gains.argument.steps                         = [solve]
solve_slow_gains.argument.solve.type                    = ddecal
solve_slow_gains.argument.solve.mode                    = complexgain
solve_slow_gains.argument.solve.h5parm                  = slow_h5parm
solve_slow_gains.argument.solve.sourcedb                = sourcedb
solve_slow_gains.argument.solve.solint                  = timestep
solve_slow_gains.argument.solve.nchan                   = freqstep
solve_slow_gains.argument.solve.propagatesolutions      = {{ propagatesolutions }}
solve_slow_gains.argument.solve.applycal.parmdb         = fast_h5parm
solve_slow_gains.argument.solve.applycal.steps          = [tec]
solve_slow_gains.argument.solve.applycal.tec.correction = origtec000
{% if use_beam %}
solve_slow_gains.argument.solve.usebeammodel            = True
{% endif %}
solve_slow_gains.argument.solve.uvlambdamin             = {{ solve_min_uv_lambda }}
solve_slow_gains.argument.solve.smoothnessconstraint    = {{ smoothnessconstraint }}
solve_slow_gains.argument.solve.maxiter                 = {{ maxiter }}
solve_slow_gains.argument.solve.tolerance               = {{ tolerance }}
solve_slow_gains.argument.msout.storagemanager          = "Dysco"

# compress slow-gain mapfile so that all files are in one group, length = 1
create_compressed_mapfile_slow.control.kind        = plugin
create_compressed_mapfile_slow.control.type        = compressMapfile
create_compressed_mapfile_slow.control.mapfile_in  = create_slow_h5parms_map.output.mapfile
create_compressed_mapfile_slow.control.mapfile_dir = input.output.mapfile_dir
create_compressed_mapfile_slow.control.filename    = compress_slow.mapfile

# create a mapfile for output of combine step, length = 1
create_slow_output_map.control.kind        = plugin
create_slow_output_map.control.type        = addListMapfile
create_slow_output_map.control.hosts       = {{ hosts }}
create_slow_output_map.control.files       = [input.output.working_directory/input.output.job_name/slow_gains.h5]
create_slow_output_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_output_map.control.filename    = combine_slow_h5parms_output.mapfile

# collect all the slow-gain solutions, length = nfreqchunks*nobs -> 1
combine_slow_gains.control.type        = collect_h5parms
combine_slow_gains.control.mapfile_in  = create_compressed_mapfile_slow.output.mapfile
combine_slow_gains.control.inputkey    = infiles
combine_slow_gains.control.mapfile_out = create_slow_output_map.output.mapfile
combine_slow_gains.control.outputkey   = outfile
combine_slow_gains.argument.flags      = [-c,infiles]
combine_slow_gains.argument.outh5parm  = outfile

# fit screens to slow gains, length = 1
# TODO: better to reweight, then split h5parm to allow parallel processing of screen fitting
fit_slow_screens.control.type         = fit_gain_screens
fit_slow_screens.control.mapfile_in   = combine_slow_gains.output.mapfile
fit_slow_screens.control.inputkey     = infile
fit_slow_screens.argument.flags       = [infile]

# create a mapfile for output of a-term step, length = 1
create_slow_aterms_output_map.control.kind        = plugin
create_slow_aterms_output_map.control.type        = addListMapfile
create_slow_aterms_output_map.control.hosts       = {{ hosts }}
create_slow_aterms_output_map.control.files       = [input.output.working_directory/input.output.job_name/slow_aterms.fits]
create_slow_aterms_output_map.control.mapfile_dir = input.output.mapfile_dir
create_slow_aterms_output_map.control.filename    = slow_aterms_output.mapfile

# make a-term images for IDG, length = 1
# TODO: split h5parm and process in parallel
make_slow_aterms.control.type        = make_aterm_images
make_slow_aterms.control.mapfile_in  = fit_slow_screens.output.mapfile
make_slow_aterms.control.inputkey    = infile
make_slow_aterms.control.mapfile_out = create_slow_aterms_output_map.output.mapfile
make_slow_aterms.control.outputkey   = outfile
make_slow_aterms.argument.flags      = [infile,gain000,outfile,{{ sector_bounds_deg }},{{ sector_bounds_mid_deg }}]
make_slow_aterms.argument.smooth     = 3
make_slow_aterms.argument.gsize      = 5

# create a mapfile for output of combine step, length = 1
create_combined_output_map.control.kind        = plugin
create_combined_output_map.control.type        = addListMapfile
create_combined_output_map.control.hosts       = {{ hosts }}
create_combined_output_map.control.files       = [input.output.working_directory/input.output.job_name/combined_solutions.h5]
create_combined_output_map.control.mapfile_dir = input.output.mapfile_dir
create_combined_output_map.control.filename    = combine_all_h5parms_output.mapfile

# combine fast and slow h5parms, length = 2 -> 1
combine_h5parms.control.type        = combine_h5parms
combine_h5parms.control.mapfiles_in = [combine_fast_phases.output.mapfile,combine_slow_gains.output.mapfile]
combine_h5parms.control.inputkeys   = [h1,h2]
combine_h5parms.control.mapfile_out = create_combined_output_map.output.mapfile
combine_h5parms.control.outputkey   = outfile
combine_h5parms.argument.flags      = [h1,h2,outfile]

{% endif %}

